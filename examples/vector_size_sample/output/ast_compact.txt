.  : UnexposedDecl type=.Invalid
. foo : FunctionDecl type=int (const int *, unsigned long).FunctionProto
.. buf : ParmDecl type=const int *.Pointer
.. n : ParmDecl type=unsigned long.ULong
. foo_adapter_default : FunctionDecl type=int (const std::vector<int> &).FunctionProto
.. v : ParmDecl type=const std::vector<int> &.LValueReference
.. std : NamespaceRef type=.Invalid
... std : Namespace type=
.. vector : TemplateRef type=.Invalid
... vector : ClassTemplate type=
..  : CompoundStmt type=.Invalid
..  : ReturnStmt type=.Invalid
.. foo : CallExpr type=int.Int
... foo : UnexposedExpr type=int (*)(const int *, unsigned long).Pointer
... foo : DeclRefExpr type=int (const int *, unsigned long).FunctionProto
.... foo : FunctionDecl type=int (const int *, unsigned long)
..... buf : ParmDecl type=const int *.Pointer
..... n : ParmDecl type=unsigned long.ULong
...  : UnaryOperator type=const std::__vector_base<int, std::allocator<int>>::value_type *.Pointer
... operator[] : CallExpr type=const std::__vector_base<int, std::allocator<int>>::value_type.Typedef
.... v : DeclRefExpr type=const std::vector<int>.Elaborated
..... v : ParmDecl type=const std::vector<int> &
...... std : NamespaceRef type=.Invalid
....... std : Namespace type=
...... vector : TemplateRef type=.Invalid
....... vector : ClassTemplate type=
.... operator[] : UnexposedExpr type=std::vector<int>::const_reference (*)(std::vector<int>::size_type) const noexcept.Pointer
.... operator[] : DeclRefExpr type=std::vector<int>::const_reference (std::vector<int>::size_type) const noexcept.FunctionProto
..... operator[] : CXXMethod type=std::vector<int>::const_reference (std::vector<int>::size_type) const noexcept
....  : UnexposedExpr type=std::vector<int>::size_type.Typedef
....  : IntegerLiteral type=int.Int
... size : CallExpr type=std::vector<int>::size_type.Typedef
.... size : MemberRefExpr type=<bound member function type>.Unexposed
.... v : DeclRefExpr type=const std::vector<int>.Elaborated
..... v : ParmDecl type=const std::vector<int> &
...... std : NamespaceRef type=.Invalid
....... std : Namespace type=
...... vector : TemplateRef type=.Invalid
....... vector : ClassTemplate type=
. FancyVec : TypedefDecl type=FancyVec.Typedef
.. std : NamespaceRef type=.Invalid
... std : Namespace type=
.. vector : TemplateRef type=.Invalid
... vector : ClassTemplate type=
.. my : NamespaceRef type=.Invalid
... my : Namespace type=
.. custom_allocator : TemplateRef type=.Invalid
... custom_allocator : ClassTemplate type=
. foo_adapter_custom : FunctionDecl type=int (const FancyVec &).FunctionProto
.. v : ParmDecl type=const FancyVec &.LValueReference
.. FancyVec : TypeRef type=FancyVec.Typedef
... FancyVec : TypedefDecl type=FancyVec
.... std : NamespaceRef type=.Invalid
..... std : Namespace type=
.... vector : TemplateRef type=.Invalid
..... vector : ClassTemplate type=
.... my : NamespaceRef type=.Invalid
..... my : Namespace type=
.... custom_allocator : TemplateRef type=.Invalid
..... custom_allocator : ClassTemplate type=
..  : CompoundStmt type=.Invalid
..  : ReturnStmt type=.Invalid
.. foo : CallExpr type=int.Int
... foo : UnexposedExpr type=int (*)(const int *, unsigned long).Pointer
... foo : DeclRefExpr type=int (const int *, unsigned long).FunctionProto
.... foo : FunctionDecl type=int (const int *, unsigned long)
..... buf : ParmDecl type=const int *.Pointer
..... n : ParmDecl type=unsigned long.ULong
...  : UnaryOperator type=const std::__vector_base<int, my::custom_allocator<int>>::value_type *.Pointer
... operator[] : CallExpr type=const std::__vector_base<int, my::custom_allocator<int>>::value_type.Typedef
.... v : DeclRefExpr type=const FancyVec.Typedef
..... v : ParmDecl type=const FancyVec &
...... FancyVec : TypeRef type=FancyVec.Typedef
....... FancyVec : TypedefDecl type=FancyVec
........ std : NamespaceRef type=.Invalid
......... std : Namespace type=
........ vector : TemplateRef type=.Invalid
......... vector : ClassTemplate type=
........ my : NamespaceRef type=.Invalid
......... my : Namespace type=
........ custom_allocator : TemplateRef type=.Invalid
......... custom_allocator : ClassTemplate type=
.... operator[] : UnexposedExpr type=std::vector<int, my::custom_allocator<int>>::const_reference (*)(std::vector<int, my::custom_allocator<int>>::size_type) const noexcept.Pointer
.... operator[] : DeclRefExpr type=std::vector<int, my::custom_allocator<int>>::const_reference (std::vector<int, my::custom_allocator<int>>::size_type) const noexcept.FunctionProto
..... operator[] : CXXMethod type=std::vector<int, my::custom_allocator<int>>::const_reference (std::vector<int, my::custom_allocator<int>>::size_type) const noexcept
....  : UnexposedExpr type=std::vector<int, my::custom_allocator<int>>::size_type.Typedef
....  : IntegerLiteral type=int.Int
... size : CallExpr type=std::vector<int, my::custom_allocator<int>>::size_type.Typedef
.... size : MemberRefExpr type=<bound member function type>.Unexposed
.... v : DeclRefExpr type=const FancyVec.Typedef
..... v : ParmDecl type=const FancyVec &
...... FancyVec : TypeRef type=FancyVec.Typedef
....... FancyVec : TypedefDecl type=FancyVec
........ std : NamespaceRef type=.Invalid
......... std : Namespace type=
........ vector : TemplateRef type=.Invalid
......... vector : ClassTemplate type=
........ my : NamespaceRef type=.Invalid
......... my : Namespace type=
........ custom_allocator : TemplateRef type=.Invalid
......... custom_allocator : ClassTemplate type=
. foo_at_rvalue : FunctionDecl type=int (const FancyVec &, size_t).FunctionProto
.. v : ParmDecl type=const FancyVec &.LValueReference
.. FancyVec : TypeRef type=FancyVec.Typedef
... FancyVec : TypedefDecl type=FancyVec
.... std : NamespaceRef type=.Invalid
..... std : Namespace type=
.... vector : TemplateRef type=.Invalid
..... vector : ClassTemplate type=
.... my : NamespaceRef type=.Invalid
..... my : Namespace type=
.... custom_allocator : TemplateRef type=.Invalid
..... custom_allocator : ClassTemplate type=
.. n : ParmDecl type=size_t.Typedef
.. size_t : TypeRef type=size_t.Typedef
... size_t : TypedefDecl type=size_t
..  : CompoundStmt type=.Invalid
..  : ReturnStmt type=.Invalid
.. at : UnexposedExpr type=std::__vector_base<int, my::custom_allocator<int>>::value_type.Typedef
.. at : CallExpr type=const std::__vector_base<int, my::custom_allocator<int>>::value_type.Typedef
... at : MemberRefExpr type=<bound member function type>.Unexposed
... v : DeclRefExpr type=const FancyVec.Typedef
.... v : ParmDecl type=const FancyVec &
..... FancyVec : TypeRef type=FancyVec.Typedef
...... FancyVec : TypedefDecl type=FancyVec
....... std : NamespaceRef type=.Invalid
........ std : Namespace type=
....... vector : TemplateRef type=.Invalid
........ vector : ClassTemplate type=
....... my : NamespaceRef type=.Invalid
........ my : Namespace type=
....... custom_allocator : TemplateRef type=.Invalid
........ custom_allocator : ClassTemplate type=
... n : UnexposedExpr type=size_t.Typedef
... n : DeclRefExpr type=size_t.Typedef
.... n : ParmDecl type=size_t
..... size_t : TypeRef type=size_t.Typedef
...... size_t : TypedefDecl type=size_t
. foo_at_lvalue : FunctionDecl type=void (FancyVec &, size_t).FunctionProto
.. v : ParmDecl type=FancyVec &.LValueReference
.. FancyVec : TypeRef type=FancyVec.Typedef
... FancyVec : TypedefDecl type=FancyVec
.... std : NamespaceRef type=.Invalid
..... std : Namespace type=
.... vector : TemplateRef type=.Invalid
..... vector : ClassTemplate type=
.... my : NamespaceRef type=.Invalid
..... my : Namespace type=
.... custom_allocator : TemplateRef type=.Invalid
..... custom_allocator : ClassTemplate type=
.. n : ParmDecl type=size_t.Typedef
.. size_t : TypeRef type=size_t.Typedef
... size_t : TypedefDecl type=size_t
..  : CompoundStmt type=.Invalid
..  : BinaryOperator type=std::__vector_base<int, my::custom_allocator<int>>::value_type.Typedef
.. at : CallExpr type=std::__vector_base<int, my::custom_allocator<int>>::value_type.Typedef
... at : MemberRefExpr type=<bound member function type>.Unexposed
... v : DeclRefExpr type=FancyVec.Typedef
.... v : ParmDecl type=FancyVec &
..... FancyVec : TypeRef type=FancyVec.Typedef
...... FancyVec : TypedefDecl type=FancyVec
....... std : NamespaceRef type=.Invalid
........ std : Namespace type=
....... vector : TemplateRef type=.Invalid
........ vector : ClassTemplate type=
....... my : NamespaceRef type=.Invalid
........ my : Namespace type=
....... custom_allocator : TemplateRef type=.Invalid
........ custom_allocator : ClassTemplate type=
... n : UnexposedExpr type=size_t.Typedef
... n : DeclRefExpr type=size_t.Typedef
.... n : ParmDecl type=size_t
..... size_t : TypeRef type=size_t.Typedef
...... size_t : TypedefDecl type=size_t
..  : IntegerLiteral type=int.Int
