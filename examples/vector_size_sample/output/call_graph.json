{
  "graph": {
    "label": "<Project name>",
    "directed": true,
    "type": "call graph",
    "metadata": {
      "Project": {}
    },
    "nodes": {
      "0": {
        "label": "foo_adapter_default(const std::vector<int> &)",
        "metadata": {
          "usr": "c:@F@foo_adapter_default#&1$@N@std@N@__1@S@vector>#I#$@N@std@N@__1@S@allocator>#I#",
          "signature": "int foo_adapter_default(const std::vector<int> & v)"
        }
      },
      "1": {
        "label": "foo(const int *, unsigned long)",
        "metadata": {
          "usr": "c:@F@foo",
          "signature": "int foo(const int * buf, unsigned long n)"
        }
      },
      "2": {
        "label": "operator[](std::vector<int>::size_type)",
        "metadata": {
          "usr": "c:@N@std@N@__1@S@vector>#I#$@N@std@N@__1@S@allocator>#I@F@operator[]#l#1",
          "signature": "std::vector<int>::const_reference operator[](std::vector<int>::size_type __n)"
        }
      },
      "3": {
        "label": "size()",
        "metadata": {
          "usr": "c:@N@std@N@__1@S@vector>#I#$@N@std@N@__1@S@allocator>#I@F@size#1",
          "signature": "std::vector<int>::size_type size()"
        }
      },
      "4": {
        "label": "foo_adapter_custom(const FancyVec &)",
        "metadata": {
          "usr": "c:@F@foo_adapter_custom#&1$@N@std@N@__1@S@vector>#I#$@N@my@S@custom_allocator>#I#",
          "signature": "int foo_adapter_custom(const FancyVec & v)"
        }
      },
      "5": {
        "label": "operator[](std::vector<int, my::custom_allocator<int>>::size_type)",
        "metadata": {
          "usr": "c:@N@std@N@__1@S@vector>#I#$@N@my@S@custom_allocator>#I@F@operator[]#l#1",
          "signature": "std::vector<int, my::custom_allocator<int>>::const_reference operator[](std::vector<int, my::custom_allocator<int>>::size_type __n)"
        }
      },
      "6": {
        "label": "operator[](size_t)",
        "metadata": {
          "usr": "c:@N@my@S@Ptr>#I@F@operator[]#l#1",
          "signature": "const int & operator[](size_t n)"
        }
      },
      "7": {
        "label": "size()",
        "metadata": {
          "usr": "c:@N@std@N@__1@S@vector>#I#$@N@my@S@custom_allocator>#I@F@size#1",
          "signature": "std::vector<int, my::custom_allocator<int>>::size_type size()"
        }
      },
      "8": {
        "label": "operator-<>(const Ptr<int> &, const Ptr<int>)",
        "metadata": {
          "usr": "c:@N@my@F@operator-<#I>#&1$@N@my@S@Ptr>#I#1S1_#",
          "signature": "ptrdiff_t operator-(const Ptr<int> & a, const Ptr<int> b)"
        }
      },
      "9": {
        "label": "Ptr(const Ptr<int> &)",
        "metadata": {
          "usr": "c:@N@my@S@Ptr>#I@F@Ptr#&1$@N@my@S@Ptr>#I#",
          "signature": "void Ptr(const Ptr<int> & )"
        }
      },
      "10": {
        "label": "foo_at_rvalue(const FancyVec &, size_t)",
        "metadata": {
          "usr": "c:@F@foo_at_rvalue#&1$@N@std@N@__1@S@vector>#I#$@N@my@S@custom_allocator>#I#l#",
          "signature": "int foo_at_rvalue(const FancyVec & v, size_t n)"
        }
      },
      "11": {
        "label": "at(std::vector<int, my::custom_allocator<int>>::size_type)",
        "metadata": {
          "usr": "c:@N@std@N@__1@S@vector>#I#$@N@my@S@custom_allocator>#I@F@at#l#1",
          "signature": "std::vector<int, my::custom_allocator<int>>::const_reference at(std::vector<int, my::custom_allocator<int>>::size_type __n)"
        }
      },
      "12": {
        "label": "__throw_out_of_range()",
        "metadata": {
          "usr": "c:@N@std@N@__1@S@__vector_base>#I#$@N@my@S@custom_allocator>#I@F@__throw_out_of_range#1",
          "signature": "void __throw_out_of_range()"
        }
      },
      "13": {
        "label": "__throw_out_of_range()",
        "metadata": {
          "usr": "c:@N@std@N@__1@S@__vector_base_common>#Vb1@F@__throw_out_of_range#1",
          "signature": "void __throw_out_of_range()"
        }
      },
      "14": {
        "label": "foo_at_lvalue(FancyVec &, size_t)",
        "metadata": {
          "usr": "c:@F@foo_at_lvalue#&$@N@std@N@__1@S@vector>#I#$@N@my@S@custom_allocator>#I#l#",
          "signature": "void foo_at_lvalue(FancyVec & v, size_t n)"
        }
      },
      "15": {
        "label": "at(std::vector<int, my::custom_allocator<int>>::size_type)",
        "metadata": {
          "usr": "c:@N@std@N@__1@S@vector>#I#$@N@my@S@custom_allocator>#I@F@at#l#",
          "signature": "std::vector<int, my::custom_allocator<int>>::reference at(std::vector<int, my::custom_allocator<int>>::size_type __n)"
        }
      },
      "16": {
        "label": "operator[](size_t)",
        "metadata": {
          "usr": "c:@N@my@S@Ptr>#I@F@operator[]#l#",
          "signature": "int & operator[](size_t n)"
        }
      }
    },
    "edges": [
      {
        "label": "int foo(const int * buf, unsigned long n)",
        "source": "0",
        "target": "1"
      },
      {
        "label": "std::vector<int>::const_reference operator[](std::vector<int>::size_type __n)",
        "source": "0",
        "target": "2"
      },
      {
        "label": "std::vector<int>::size_type size()",
        "source": "0",
        "target": "3"
      },
      {
        "label": "int foo(const int * buf, unsigned long n)",
        "source": "4",
        "target": "1"
      },
      {
        "label": "std::vector<int, my::custom_allocator<int>>::const_reference operator[](std::vector<int, my::custom_allocator<int>>::size_type __n)",
        "source": "4",
        "target": "5"
      },
      {
        "label": "std::vector<int, my::custom_allocator<int>>::size_type size()",
        "source": "4",
        "target": "7"
      },
      {
        "label": "const int & operator[](size_t n)",
        "source": "5",
        "target": "6"
      },
      {
        "label": "ptrdiff_t operator-(const Ptr<int> & a, const Ptr<int> b)",
        "source": "7",
        "target": "8"
      },
      {
        "label": "void Ptr(const Ptr<int> & )",
        "source": "7",
        "target": "9"
      },
      {
        "label": "ptrdiff_t operator-(const Ptr<int> & a, const Ptr<int> b)",
        "source": "7",
        "target": "8"
      },
      {
        "label": "void Ptr(const Ptr<int> & )",
        "source": "7",
        "target": "9"
      },
      {
        "label": "ptrdiff_t operator-(const Ptr<int> & a, const Ptr<int> b)",
        "source": "7",
        "target": "8"
      },
      {
        "label": "void Ptr(const Ptr<int> & )",
        "source": "7",
        "target": "9"
      },
      {
        "label": "std::vector<int, my::custom_allocator<int>>::const_reference at(std::vector<int, my::custom_allocator<int>>::size_type __n)",
        "source": "10",
        "target": "11"
      },
      {
        "label": "std::vector<int, my::custom_allocator<int>>::size_type size()",
        "source": "11",
        "target": "7"
      },
      {
        "label": "void __throw_out_of_range()",
        "source": "11",
        "target": "12"
      },
      {
        "label": "const int & operator[](size_t n)",
        "source": "11",
        "target": "6"
      },
      {
        "label": "void __throw_out_of_range()",
        "source": "12",
        "target": "13"
      },
      {
        "label": "void __throw_out_of_range()",
        "source": "12",
        "target": "13"
      },
      {
        "label": "std::vector<int, my::custom_allocator<int>>::reference at(std::vector<int, my::custom_allocator<int>>::size_type __n)",
        "source": "14",
        "target": "15"
      },
      {
        "label": "std::vector<int, my::custom_allocator<int>>::size_type size()",
        "source": "15",
        "target": "7"
      },
      {
        "label": "void __throw_out_of_range()",
        "source": "15",
        "target": "12"
      },
      {
        "label": "int & operator[](size_t n)",
        "source": "15",
        "target": "16"
      }
    ]
  }
}